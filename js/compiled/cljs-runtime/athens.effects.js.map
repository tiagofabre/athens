{"version":3,"sources":["athens/effects.cljs"],"mappings":"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","names":["athens.effects/new-titles-to-tx-data","new-titles","assert-titles","now","athens.util/now-ts","cljs.core.filter","x","athens.db/search-exact-node-title","cljs.core/contains?","cljs.core.map","t","athens.util/gen-block-uid","athens.effects/old-titles-to-tx-data","old-titles","new-str","with-db","title","node","athens.db/pull-nil","and__4115__auto__","clojure.string/includes?","cljs.core/empty?","cljs.core._EQ_","athens.db/linked-refs-count","temp__5735__auto__","eid","athens.effects/new-refs-to-tx-data","new-block-refs","e","ref-uid","map__90022","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","block","G__90023","G__90024","cljs.core/deref","G__90025","datascript.core/q","athens.db/dsdb","athens.effects/new-page-refs-to-tx-data","new-page-refs","source-eid","page-id","athens.effects/old-block-refs-to-tx-data","old-block-refs","athens.db/e-by-av","athens.effects/old-page-refs-to-tx-data","old-page-refs","map__90041","page","old-pages-eids","cljs.core/set","cljs.core/second","cljs.core/not","athens.effects/parse-for-links","with-tx","with-tx-data","p1__90056#","cljs.core/last","p1__90057#","cljs.core.nth","p1__90058#","cljs.core/group-by","cljs.core/first","cljs.core.mapv","p__90092","vec__90093","_eid","datoms","p1__90062#","cljs.core.sort_by","cljs.core.mapcat","p__90068","vec__90069","assertion","retraction","assert-string","retract-string","assert-data","athens.walk/walk-string","retract-data","tx-data","cljs.core.concat","athens.effects/ph-link-created!","outputs","cljs.core.doall","p__90138","vec__90139","_e","a","_v","_t","t-or-f","p__90122","vec__90123","_a","v","_t-or-f","num-refs","G__90128","G__90129","G__90130","datascript.core/pull","cljs.core/count","block-or-page","G__90131","G__90132","G__90133","js/posthog","cljs.core/clj->js","athens.effects/walk-transact","cljs.core.prn","cljs.pprint.pprint","e90145","datascript.core.with$","more-tx-data","final-tx-data","cljs.core/vec","posh.reagent/transact!","js/Error","js/alert","re-frame.core/reg-fx","new-db","datascript.core.reset_conn_BANG_","p__90149","vec__90150","key","value","js/localStorage.setItem","db","datascript.transit/write-transit-str","p__90153","map__90154","url","method","opts","on-success","on-failure","c__56877__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__56878__auto__","switch__56774__auto__","state_90212","state_val_90213","inst_90175","inst_90178","inst_90179","statearr-90224","statearr-90225","statearr-90226","G__90227","cljs.core/Keyword","statearr-90228","statearr-90229","statearr-90230","statearr-90231","statearr-90235","statearr-90236","inst_90189","statearr-90237","statearr-90238","inst_90200","inst_90202","inst_90203","statearr-90242","statearr-90245","statearr-90247","inst_90170","inst_90173","cljs.core.async.impl.ioc-helpers/take!","inst_90208","cljs.core.async.impl.ioc-helpers/return-chan","statearr-90249","statearr-90251","statearr-90254","inst_90194","statearr-90255","inst_90197","inst_90198","statearr-90257","statearr-90258","statearr-90259","inst_90192","statearr-90261","statearr-90263","inst_90205","inst_90206","statearr-90264","inst_90181","inst_90182","inst_90183","inst_90184","inst_90185","statearr-90266","statearr-90268","statearr-90269","state-machine__56775__auto__","ret-value__56776__auto__","result__56777__auto__","cljs.core/keyword-identical?","ex__56778__auto__","e90270","statearr-90271","cljs.core/seq","statearr-90272","state__56879__auto__","statearr-90273","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/post","cljs-http.client/get","cljs-http.client/put","cljs-http.client/delete","re-frame.core/dispatch","cljs.core.conj","timers","cljs.core.atom","p__90277","map__90278","action","id","event","wait","G__90280","cljs.core.swap_BANG_","cljs.core/assoc","js/setTimeout","js/clearTimeout","cljs.core/dissoc","p__90286","vec__90287","uid","index","active-el","js/document","vec__90290","embed-id","athens.db/uid-and-embed-id","html-id","el","js/document.querySelector","or__4126__auto__","goog.dom.selection/setCursorPosition","p__90299","vec__90301","start","end","target","p__90309","vec__90310","tag","properties","stylefy.core/tag","message"],"sourcesContent":["(ns athens.effects\n  (:require\n    [athens.db :as db]\n    [athens.util :as util]\n    [athens.walk :as walk]\n    [cljs-http.client :as http]\n    [cljs.core.async :refer [go <!]]\n    [cljs.pprint :refer [pprint]]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [goog.dom.selection :refer [setCursorPosition]]\n    [posh.reagent :as p :refer [transact!]]\n    [re-frame.core :refer [dispatch reg-fx]]\n    [stylefy.core :as stylefy]))\n\n\n;;; Effects\n\n(defn new-titles-to-tx-data\n  \"Filter: node/title doesn't exist yet in the db or in the titles being asserted (e.g. when renaming a page and changing it's references).\n  Map: new node/title entity.\"\n  [new-titles assert-titles]\n  (let [now (util/now-ts)]\n    (->> new-titles\n         (filter (fn [x]\n                   (and (nil? (db/search-exact-node-title x))\n                        (not (contains? assert-titles x)))))\n         (map (fn [t]\n                {:node/title  t\n                 :block/uid   (util/gen-block-uid)\n                 :create/time now\n                 :edit/time   now})))))\n\n\n(defn old-titles-to-tx-data\n  \"Purpose is to remove orphan pages. However, if entire entity is retracted, orphan pages are still created.\n\n  Filter: new-str doesn't include link, page exists, page has no children, and has no other [[linked refs]].\n  Map: retractEntity\"\n  [old-titles new-str with-db]\n  (->> old-titles\n       (filter (fn [title]\n                 (let [node (db/pull-nil with-db '[*] [:node/title title])]\n                   (and (not (clojure.string/includes? new-str title))\n                        node\n                        (empty? (:block/children node))\n                        (= 1 (db/linked-refs-count title))))))\n       (map (fn [title]\n              (when-let [eid (:db/id (db/pull-nil with-db '[*] [:node/title title]))]\n                [:db/retractEntity eid])))))\n\n\n(defn new-refs-to-tx-data\n  \"Filter: ((ref-uid)) points to a valid block (no :node/title).\n  Map: add block/ref relationship.\"\n  [new-block-refs e]\n  (->> new-block-refs\n       (filter (fn [ref-uid]\n                 (let [block (d/q '[:find (pull ?e [*]) .\n                                    :in $ ?uid\n                                    :where [?e :block/uid ?uid]]\n                                  @db/dsdb ref-uid)\n                       {:keys [node/title]} block]\n                   (and block (nil? title)))))\n       (map (fn [ref-uid] [:db/add e :block/refs [:block/uid ref-uid]]))))\n\n\n(defn new-page-refs-to-tx-data\n  \"Filter: No filter.\n  Map: add block/ref relationship.\"\n  [new-page-refs source-eid]\n  (->> new-page-refs\n       (map (fn [page-id] [:db/add source-eid :block/refs page-id]))))\n\n\n(defn old-block-refs-to-tx-data\n  \"Filter: new-str doesn't include block ref anymore, ((ref-uid)) points to an actual block, and block/ref relationship exists.\n  Map: retract relationship.\"\n  [old-block-refs e new-str]\n  (->> old-block-refs\n       (filter (fn [ref-uid]\n                 (let [eid (db/e-by-av :block/uid ref-uid)]\n                   (and eid\n                        (not (str/includes? new-str (str \"((\" ref-uid \"))\")))))))\n       (map (fn [ref-uid] [:db/retract e :block/refs [:block/uid ref-uid]]))))\n\n\n(defn old-page-refs-to-tx-data\n  \"Filter: [[page]] points to a page and block/ref relationship does exist.\n  Map: retract block/ref relationship.\n\n  Edge Cases:\n  1. Merging two pages (renaming a page to a title that already exists).\n  - This attempt to update all the Linked References strings\n  - Querying with-db rather than the current-db to check that entity retraction already takes care of block/ref retraction.\n\n  2. Deleting an orphan page, i.e. deleting a [[link]] when the [[link]] has no children and no other linked references\n  - In this case, we can't use with-db, because the orphan page retraction happens in old-titles-to-tx-data.\n  - Pass `old-titles` and check that the block/ref being deleted is not there to avoid double retraction.\n  - Don't use :db.fn/retractAttribute because :db.cardinality/many\"\n  [old-page-refs source-eid new-str with-db old-titles]\n  (->> old-page-refs\n       (filter (fn [page-id]\n                 (let [page (db/pull-nil with-db '[*] page-id)\n                       old-pages-eids (set (map second old-titles))\n                       {:keys [node/title]} page]\n                   (and (not (str/includes? new-str (str \"[[\" title \"]]\")))\n                        page\n                        title\n                        (not (get old-pages-eids (:db/id page)))))))\n       (map (fn [page-id]\n              (when-let [page (db/pull-nil with-db '[*] page-id)]\n                [:db/retract source-eid :block/refs [:block/uid (:block/uid page)]])))))\n\n\n(defn parse-for-links\n  \"When block/string is asserted, parse for links and block refs to add.\n  When block/string is retracted, parse for links and block refs to remove.\n  Retractions need to look at asserted block/string. Use empty string if only retract.\"\n  [with-tx]\n  (let [with-tx-data  (:tx-data with-tx)\n        with-db       (:db-after with-tx)\n        assert-titles (->> with-tx-data\n                           (filter #(and (= (second %) :node/title)\n                                         (true? (last %))))\n                           (map #(nth % 2))\n                           set)]\n    (->> with-tx-data\n         (filter #(= (second %) :block/string))\n         ;; group-by entity\n         (group-by first)\n         ;; map sort-by so [true false] gives us [assertion retraction], [assertion], or [retraction]\n         (mapv (fn [[_eid datoms]]\n                 (sort-by #(-> % last not) datoms)))\n         (mapcat (fn [[assertion retraction]]\n                   (cond\n                     ;; [assertion retraction]\n                     (and (true? (last assertion)) (false? (last retraction)))\n                     (let [eid            (first assertion)\n                           assert-string  (nth assertion 2)\n                           retract-string (nth retraction 2)\n                           assert-data    (walk/walk-string assert-string)\n                           retract-data   (walk/walk-string retract-string)\n                           new-block-refs (new-refs-to-tx-data (:block/refs assert-data) eid)\n                           old-titles     (old-titles-to-tx-data (:node/titles retract-data) assert-string with-db)\n                           new-titles     (new-titles-to-tx-data (:node/titles assert-data) assert-titles)\n                           new-page-refs  (new-page-refs-to-tx-data (:page/refs assert-data) eid)\n                           old-block-refs (old-block-refs-to-tx-data (:block/refs retract-data) eid assert-string)\n                           old-page-refs  (old-page-refs-to-tx-data (:page/refs retract-data) eid assert-string with-db old-titles)\n                           tx-data        (concat []\n                                                  new-titles\n                                                  new-block-refs\n                                                  new-page-refs\n                                                  old-titles\n                                                  old-block-refs\n                                                  old-page-refs)]\n                       tx-data)\n\n                     ;; [assertion]\n                     (and (true? (last assertion)) (nil? retraction))\n                     (let [eid            (first assertion)\n                           assert-string  (nth assertion 2)\n                           assert-data    (walk/walk-string assert-string)\n                           new-titles     (new-titles-to-tx-data (:node/titles assert-data) assert-titles)\n                           new-page-refs  (new-page-refs-to-tx-data (:page/refs assert-data) eid)\n                           new-block-refs (new-refs-to-tx-data (:block/refs assert-data) eid)\n                           tx-data        (concat []\n                                                  new-titles\n                                                  new-block-refs\n                                                  new-page-refs)]\n                       tx-data)\n\n                     ;; [retraction]\n                     ;; :block/string itself is rarely retracted directly.\n                     (and (false? (last assertion)) (nil? retraction))\n                     (let [eid            (first retraction)\n                           assert-string  \"\"\n                           retract-string (nth retraction 2)\n                           retract-data   (walk/walk-string retract-string)\n                           old-titles     (old-titles-to-tx-data (:node/titles retract-data) assert-string with-db)\n                           old-block-refs (old-block-refs-to-tx-data (:block/refs retract-data) eid assert-string)\n                           old-page-refs  (old-page-refs-to-tx-data (:page/refs retract-data) eid assert-string with-db old-titles)\n                           tx-data        (concat []\n                                                  old-titles\n                                                  old-block-refs\n                                                  old-page-refs)]\n                       tx-data)))))))\n\n\n(defn ph-link-created!\n  \"Only creates `link-created` events for now.\n  TODO: link-deleted events\"\n  [outputs]\n  (doall (->> outputs\n              (filter (fn [[_e a _v _t t-or-f]]\n                        (and (= a :block/refs)\n                             t-or-f)))\n              (map (fn [[e _a v _t _t-or-f]]\n                     (let [num-refs (-> (d/pull @db/dsdb '[:block/_refs] v)\n                                        :block/_refs\n                                        count)\n                           block-or-page (if (:node/title (d/pull @db/dsdb '[:node/title :block/string] e))\n                                           :page\n                                           :block)]\n                       {:refs num-refs\n                        :attr block-or-page})))\n              (map (fn [x]\n                     (.. js/posthog (capture \"link-created\", (clj->js x))))))))\n\n\n(defn walk-transact\n  [tx-data]\n  (prn \"TX RAW INPUTS\")                                     ;; event tx-data\n  (pprint tx-data)\n  (try\n    (let [with-tx (d/with @db/dsdb tx-data)]\n      (prn \"TX WITH\")                                       ;; tx-data normalized by datascript to flat datoms\n      (pprint (:tx-data with-tx))\n      (let [more-tx-data  (parse-for-links with-tx)\n            final-tx-data (vec (concat tx-data more-tx-data))]\n        (prn \"TX MORE\")                                     ;; parsed tx-data, e.g. asserting/retracting pages and references\n        (pprint more-tx-data)\n        (prn \"TX FINAL INPUTS\")                             ;; parsing block/string (and node/title) to derive asserted or retracted titles and block refs\n        (pprint final-tx-data)\n        (let [outputs (:tx-data (transact! db/dsdb final-tx-data))]\n          (ph-link-created! outputs)\n          (prn \"TX OUTPUTS\")\n          (pprint outputs))))\n\n    (catch js/Error e\n      (js/alert (str e))\n      (prn \"EXCEPTION\" e))))\n\n\n(reg-fx\n  :transact!\n  (fn [tx-data]\n    (walk-transact tx-data)))\n\n\n(reg-fx\n  :reset-conn!\n  (fn [new-db]\n    (d/reset-conn! db/dsdb new-db)))\n\n\n(reg-fx\n  :local-storage/set!\n  (fn [[key value]]\n    (js/localStorage.setItem key value)))\n\n\n(reg-fx\n  :local-storage/set-db!\n  (fn [db]\n    (js/localStorage.setItem \"datascript/DB\" (dt/write-transit-str db))))\n\n\n(reg-fx\n  :http\n  (fn [{:keys [url method opts on-success on-failure]}]\n    (go\n      (let [http-fn (case method\n                      :post http/post :get http/get\n                      :put http/put :delete http/delete)\n            res     (<! (http-fn url opts))\n            {:keys [success body] :as all} res]\n        (if success\n          (dispatch (conj on-success body))\n          (dispatch (conj on-failure all)))))))\n\n\n(reg-fx\n  :timeout\n  (let [timers (atom {})]\n    (fn [{:keys [action id event wait]}]\n      (case action\n        :start (swap! timers assoc id (js/setTimeout #(dispatch event) wait))\n        :clear (do (js/clearTimeout (get @timers id))\n                   (swap! timers dissoc id))))))\n\n\n;; Using DOM, focus the target block.\n;; There can actually be multiple elements with the same #editable-uid-UID HTML id\n;; The same unique datascript block can be rendered multiple times: node-page, right sidebar, linked/unlinked references\n;; In this case, find the all the potential HTML blocks with that uid. The one that shares the same closest ancestor as the\n;; activeElement (where the text caret is before the new focus happens), is the container of the block to focus on.\n\n;; If an index is passed, set cursor to that index.\n\n;; TODO: some issues\n;; - auto-focus on textarea\n;; - searching for common-ancestor on inside of setTimeout vs outside\n;;   - element sometimes hasn't been created yet (enter), sometimes has been just destroyed (backspace)\n;; - uid sometimes nil\n\n(reg-fx\n  :editing/focus\n  (fn [[uid index]]\n    (if (nil? uid)\n      (when-let [active-el (.-activeElement js/document)]\n        (.blur active-el))\n      (js/setTimeout (fn []\n                       (let [[uid embed-id]  (db/uid-and-embed-id uid)\n                             html-id         (str \"editable-uid-\" uid)\n                             ;;targets (js/document.querySelectorAll html-id)\n                             ;;n       (count (array-seq targets))\n                             el              (js/document.querySelector\n                                               (if embed-id\n                                                 (or\n                                                   ;; find exact embed block\n                                                   (str \"textarea[id='\" html-id \"-embed-\" embed-id \"']\")\n                                                   ;; find embedded that starts with current html id (embed id changed due to re-render)\n                                                   (str \"textarea[id^='\" html-id \"-embed-']\"))\n                                                 ;; take default\n                                                 (str \"#\" html-id)))]\n                         #_(cond\n                             (zero? n) (prn \"No targets\")\n                             (= 1 n) (prn \"One target\")\n                             (< 1 n) (prn \"Several targets\"))\n                         (when el\n                           (.focus el)\n                           (when index\n                             (setCursorPosition el index)))))\n                     100))))\n\n\n;; todo(abhinav)\n;; think of this + up/down + editing/focus for common up down press\n;; and cursor goes to apt position rather than last visited point in the block(current)\n;; inspirations - intelli-j's up/down\n(reg-fx\n  :set-cursor-position\n  (fn [[uid start end]]\n    (js/setTimeout (fn []\n                     (when-let [target (js/document.querySelector (str \"#editable-uid-\" uid))]\n                       (.focus target)\n                       (set! (.-selectionStart target) start)\n                       (set! (.-selectionEnd target) end)))\n                   100)))\n\n\n(reg-fx\n  :stylefy/tag\n  (fn [[tag properties]]\n    (stylefy/tag tag properties)))\n\n\n(reg-fx\n  :alert/js!\n  (fn [message]\n    (js/alert message)))\n"]}